// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElementalClient is the client API for Elemental service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElementalClient interface {
	// Elements
	GetElem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Element, error)
	GetCombination(ctx context.Context, in *Combination, opts ...grpc.CallOption) (*CombinationResult, error)
	GetAll(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Elemental_GetAllClient, error)
	// Savefile
	GetInv(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Inventory, error)
	AddFound(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Suggestions
	GetSuggestion(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Suggestion, error)
	GetSuggestionCombos(ctx context.Context, in *Combination, opts ...grpc.CallOption) (*SuggestionCombinationResponse, error)
	UpSuggestion(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	DownSuggestion(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	CreateSugg(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NewSugg(ctx context.Context, in *NewSuggestionRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	// Random Suggestions
	RandomLonely(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RandomCombinationResponse, error)
	UpAndComing(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RandomCombinationResponse, error)
	// Recents
	GetRec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Recents, error)
	WaitForNextRecent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Elemental_WaitForNextRecentClient, error)
}

type elementalClient struct {
	cc grpc.ClientConnInterface
}

func NewElementalClient(cc grpc.ClientConnInterface) ElementalClient {
	return &elementalClient{cc}
}

func (c *elementalClient) GetElem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Element, error) {
	out := new(Element)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/GetElem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) GetCombination(ctx context.Context, in *Combination, opts ...grpc.CallOption) (*CombinationResult, error) {
	out := new(CombinationResult)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/GetCombination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) GetAll(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Elemental_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Elemental_ServiceDesc.Streams[0], "/elemental.Elemental/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &elementalGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Elemental_GetAllClient interface {
	Recv() (*GetAllChunk, error)
	grpc.ClientStream
}

type elementalGetAllClient struct {
	grpc.ClientStream
}

func (x *elementalGetAllClient) Recv() (*GetAllChunk, error) {
	m := new(GetAllChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *elementalClient) GetInv(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Inventory, error) {
	out := new(Inventory)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/GetInv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) AddFound(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/AddFound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) GetSuggestion(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Suggestion, error) {
	out := new(Suggestion)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/GetSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) GetSuggestionCombos(ctx context.Context, in *Combination, opts ...grpc.CallOption) (*SuggestionCombinationResponse, error) {
	out := new(SuggestionCombinationResponse)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/GetSuggestionCombos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) UpSuggestion(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/UpSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) DownSuggestion(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/DownSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) CreateSugg(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/CreateSugg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) NewSugg(ctx context.Context, in *NewSuggestionRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/NewSugg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) RandomLonely(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RandomCombinationResponse, error) {
	out := new(RandomCombinationResponse)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/RandomLonely", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) UpAndComing(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RandomCombinationResponse, error) {
	out := new(RandomCombinationResponse)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/UpAndComing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) GetRec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Recents, error) {
	out := new(Recents)
	err := c.cc.Invoke(ctx, "/elemental.Elemental/GetRec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elementalClient) WaitForNextRecent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Elemental_WaitForNextRecentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Elemental_ServiceDesc.Streams[1], "/elemental.Elemental/WaitForNextRecent", opts...)
	if err != nil {
		return nil, err
	}
	x := &elementalWaitForNextRecentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Elemental_WaitForNextRecentClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type elementalWaitForNextRecentClient struct {
	grpc.ClientStream
}

func (x *elementalWaitForNextRecentClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ElementalServer is the server API for Elemental service.
// All implementations must embed UnimplementedElementalServer
// for forward compatibility
type ElementalServer interface {
	// Elements
	GetElem(context.Context, *wrapperspb.StringValue) (*Element, error)
	GetCombination(context.Context, *Combination) (*CombinationResult, error)
	GetAll(*wrapperspb.StringValue, Elemental_GetAllServer) error
	// Savefile
	GetInv(context.Context, *wrapperspb.StringValue) (*Inventory, error)
	AddFound(context.Context, *SuggestionRequest) (*emptypb.Empty, error)
	// Suggestions
	GetSuggestion(context.Context, *wrapperspb.StringValue) (*Suggestion, error)
	GetSuggestionCombos(context.Context, *Combination) (*SuggestionCombinationResponse, error)
	UpSuggestion(context.Context, *SuggestionRequest) (*VoteResponse, error)
	DownSuggestion(context.Context, *SuggestionRequest) (*VoteResponse, error)
	CreateSugg(context.Context, *CreateRequest) (*emptypb.Empty, error)
	NewSugg(context.Context, *NewSuggestionRequest) (*VoteResponse, error)
	// Random Suggestions
	RandomLonely(context.Context, *wrapperspb.StringValue) (*RandomCombinationResponse, error)
	UpAndComing(context.Context, *wrapperspb.StringValue) (*RandomCombinationResponse, error)
	// Recents
	GetRec(context.Context, *emptypb.Empty) (*Recents, error)
	WaitForNextRecent(*emptypb.Empty, Elemental_WaitForNextRecentServer) error
	mustEmbedUnimplementedElementalServer()
}

// UnimplementedElementalServer must be embedded to have forward compatible implementations.
type UnimplementedElementalServer struct {
}

func (UnimplementedElementalServer) GetElem(context.Context, *wrapperspb.StringValue) (*Element, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElem not implemented")
}
func (UnimplementedElementalServer) GetCombination(context.Context, *Combination) (*CombinationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombination not implemented")
}
func (UnimplementedElementalServer) GetAll(*wrapperspb.StringValue, Elemental_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedElementalServer) GetInv(context.Context, *wrapperspb.StringValue) (*Inventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInv not implemented")
}
func (UnimplementedElementalServer) AddFound(context.Context, *SuggestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFound not implemented")
}
func (UnimplementedElementalServer) GetSuggestion(context.Context, *wrapperspb.StringValue) (*Suggestion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestion not implemented")
}
func (UnimplementedElementalServer) GetSuggestionCombos(context.Context, *Combination) (*SuggestionCombinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestionCombos not implemented")
}
func (UnimplementedElementalServer) UpSuggestion(context.Context, *SuggestionRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpSuggestion not implemented")
}
func (UnimplementedElementalServer) DownSuggestion(context.Context, *SuggestionRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownSuggestion not implemented")
}
func (UnimplementedElementalServer) CreateSugg(context.Context, *CreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSugg not implemented")
}
func (UnimplementedElementalServer) NewSugg(context.Context, *NewSuggestionRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSugg not implemented")
}
func (UnimplementedElementalServer) RandomLonely(context.Context, *wrapperspb.StringValue) (*RandomCombinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomLonely not implemented")
}
func (UnimplementedElementalServer) UpAndComing(context.Context, *wrapperspb.StringValue) (*RandomCombinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpAndComing not implemented")
}
func (UnimplementedElementalServer) GetRec(context.Context, *emptypb.Empty) (*Recents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRec not implemented")
}
func (UnimplementedElementalServer) WaitForNextRecent(*emptypb.Empty, Elemental_WaitForNextRecentServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForNextRecent not implemented")
}
func (UnimplementedElementalServer) mustEmbedUnimplementedElementalServer() {}

// UnsafeElementalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElementalServer will
// result in compilation errors.
type UnsafeElementalServer interface {
	mustEmbedUnimplementedElementalServer()
}

func RegisterElementalServer(s grpc.ServiceRegistrar, srv ElementalServer) {
	s.RegisterService(&Elemental_ServiceDesc, srv)
}

func _Elemental_GetElem_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetElem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/GetElem",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).GetElem(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_GetCombination_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(Combination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetCombination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/GetCombination",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).GetCombination(ctx, req.(*Combination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_GetAll_Handler(srv any, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElementalServer).GetAll(m, &elementalGetAllServer{stream})
}

type Elemental_GetAllServer interface {
	Send(*GetAllChunk) error
	grpc.ServerStream
}

type elementalGetAllServer struct {
	grpc.ServerStream
}

func (x *elementalGetAllServer) Send(m *GetAllChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Elemental_GetInv_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetInv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/GetInv",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).GetInv(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_AddFound_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(SuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).AddFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/AddFound",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).AddFound(ctx, req.(*SuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_GetSuggestion_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/GetSuggestion",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).GetSuggestion(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_GetSuggestionCombos_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(Combination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetSuggestionCombos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/GetSuggestionCombos",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).GetSuggestionCombos(ctx, req.(*Combination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_UpSuggestion_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(SuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).UpSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/UpSuggestion",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).UpSuggestion(ctx, req.(*SuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_DownSuggestion_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(SuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).DownSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/DownSuggestion",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).DownSuggestion(ctx, req.(*SuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_CreateSugg_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).CreateSugg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/CreateSugg",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).CreateSugg(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_NewSugg_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(NewSuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).NewSugg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/NewSugg",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).NewSugg(ctx, req.(*NewSuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_RandomLonely_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).RandomLonely(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/RandomLonely",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).RandomLonely(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_UpAndComing_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).UpAndComing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/UpAndComing",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).UpAndComing(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_GetRec_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElementalServer).GetRec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elemental.Elemental/GetRec",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(ElementalServer).GetRec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elemental_WaitForNextRecent_Handler(srv any, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElementalServer).WaitForNextRecent(m, &elementalWaitForNextRecentServer{stream})
}

type Elemental_WaitForNextRecentServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type elementalWaitForNextRecentServer struct {
	grpc.ServerStream
}

func (x *elementalWaitForNextRecentServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// Elemental_ServiceDesc is the grpc.ServiceDesc for Elemental service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Elemental_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elemental.Elemental",
	HandlerType: (*ElementalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetElem",
			Handler:    _Elemental_GetElem_Handler,
		},
		{
			MethodName: "GetCombination",
			Handler:    _Elemental_GetCombination_Handler,
		},
		{
			MethodName: "GetInv",
			Handler:    _Elemental_GetInv_Handler,
		},
		{
			MethodName: "AddFound",
			Handler:    _Elemental_AddFound_Handler,
		},
		{
			MethodName: "GetSuggestion",
			Handler:    _Elemental_GetSuggestion_Handler,
		},
		{
			MethodName: "GetSuggestionCombos",
			Handler:    _Elemental_GetSuggestionCombos_Handler,
		},
		{
			MethodName: "UpSuggestion",
			Handler:    _Elemental_UpSuggestion_Handler,
		},
		{
			MethodName: "DownSuggestion",
			Handler:    _Elemental_DownSuggestion_Handler,
		},
		{
			MethodName: "CreateSugg",
			Handler:    _Elemental_CreateSugg_Handler,
		},
		{
			MethodName: "NewSugg",
			Handler:    _Elemental_NewSugg_Handler,
		},
		{
			MethodName: "RandomLonely",
			Handler:    _Elemental_RandomLonely_Handler,
		},
		{
			MethodName: "UpAndComing",
			Handler:    _Elemental_UpAndComing_Handler,
		},
		{
			MethodName: "GetRec",
			Handler:    _Elemental_GetRec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _Elemental_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WaitForNextRecent",
			Handler:       _Elemental_WaitForNextRecent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "elemental.proto",
}
